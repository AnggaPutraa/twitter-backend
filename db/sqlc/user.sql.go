// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name,
  username,
  email,
  hashed_password,
  bio
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, name, username, email, hashed_password, bio, created_at, updated_at
`

type CreateUserParams struct {
	Name           string         `json:"name"`
	Username       string         `json:"username"`
	Email          string         `json:"email"`
	HashedPassword string         `json:"hashed_password"`
	Bio            sql.NullString `json:"bio"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserFollowing = `-- name: CreateUserFollowing :one
INSERT INTO followers (
  follower_id, 
  followes_id
) VALUES (
  $1, 
  $2
) RETURNING follower_id, followes_id
`

type CreateUserFollowingParams struct {
	FollowerID uuid.UUID `json:"follower_id"`
	FollowesID uuid.UUID `json:"followes_id"`
}

func (q *Queries) CreateUserFollowing(ctx context.Context, arg CreateUserFollowingParams) (Follower, error) {
	row := q.db.QueryRowContext(ctx, createUserFollowing, arg.FollowerID, arg.FollowesID)
	var i Follower
	err := row.Scan(&i.FollowerID, &i.FollowesID)
	return i, err
}

const deleteUserFollowing = `-- name: DeleteUserFollowing :exec
DELETE FROM followers
WHERE follower_id = $1 AND followes_id = $2
`

type DeleteUserFollowingParams struct {
	FollowerID uuid.UUID `json:"follower_id"`
	FollowesID uuid.UUID `json:"followes_id"`
}

func (q *Queries) DeleteUserFollowing(ctx context.Context, arg DeleteUserFollowingParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserFollowing, arg.FollowerID, arg.FollowesID)
	return err
}

const getAllUser = `-- name: GetAllUser :many
SELECT
  id,
  username,
  email
FROM users
`

type GetAllUserRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
}

func (q *Queries) GetAllUser(ctx context.Context) ([]GetAllUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUserRow{}
	for rows.Next() {
		var i GetAllUserRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, username, email, hashed_password, bio, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, username, email, hashed_password, bio, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserFollowers = `-- name: GetUserFollowers :many
SELECT 
  u.id,
  u.username,
  u.email
FROM users u
JOIN followers f ON u.id = f.follower_id
WHERE f.followes_id = $1
`

type GetUserFollowersRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
}

func (q *Queries) GetUserFollowers(ctx context.Context, followesID uuid.UUID) ([]GetUserFollowersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFollowers, followesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserFollowersRow{}
	for rows.Next() {
		var i GetUserFollowersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFollowing = `-- name: GetUserFollowing :many
SELECT
  u.id,
  u.username,
  u.email
FROM users u
JOIN followers f ON u.id = f.followes_id
WHERE f.follower_id = $1
`

type GetUserFollowingRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
}

func (q *Queries) GetUserFollowing(ctx context.Context, followerID uuid.UUID) ([]GetUserFollowingRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFollowing, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserFollowingRow{}
	for rows.Next() {
		var i GetUserFollowingRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
