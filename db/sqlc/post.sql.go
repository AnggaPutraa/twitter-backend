// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: post.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  body,
  user_id
) VALUES (
  $1,
  $2
) RETURNING id, body, created_at, updated_at, user_id
`

type CreatePostParams struct {
	Body   string    `json:"body"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Body, arg.UserID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET
  body = $2
WHERE
  id = $1 AND
  user_id = $3
RETURNING id, body, created_at, updated_at, user_id
`

type UpdatePostParams struct {
	ID     uuid.UUID `json:"id"`
	Body   string    `json:"body"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.ID, arg.Body, arg.UserID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
